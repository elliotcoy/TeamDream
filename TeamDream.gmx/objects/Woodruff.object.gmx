<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Grouping Control Code
seekingPlacement = true;
for(i=0;i&lt;global.numBuddies;i++)
{   if(seekingPlacement)
    {   if(global.buddyList[i] == noone)
        {   global.buddyList[i] = instance_nearest(x,y,Woodruff);
            seekingPlacement = false;
            pnum = i; //player number
        }
    }
}

global.LeaderBuddy=0;

if(global.numBuddies&gt;pnum+1)
{   with(instance_create(x-2,y-2,Woodruff))
    {   hspeed=-10-2*bnum;
        vspeed=-10-2*bnum;
        state=4;
    }
}
if(pnum){ ai =  true;}
else    { ai = false;}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RAGE Creation Code
bnum = pnum;//buddyNumber
alive=true;
onGround = false;
coinNum = 0;
cCount = 10;

punch = 0;
fpunch = 0;
bpunch = 0;

active = true;//false will disable player controls
hurt = false;//if true, temp immunity and red color flash
pc = c_white;//player-color



//*******AI VARIABLES*****************
jump = false;
//*******AI VARIABLES*****************


DMGMAP[0]=1;
DMGMAP[1]=3;
DMGMAP[2]=5;
DMGMAP[3]=10;
DMGMAP[4]=20;
DMGMAP[5]=40;
power_level_damage=DMGMAP[global.powerLevel];

/***************************************************
  RAGE MODES
  
  0 - Standard
  1 - Flight
  2 - Climb
 ***************************************************/

state = 0;

/***************************************************
  Drawing Anchors
 ***************************************************/

//back hand
b_hand[0] = x;
b_hand[1] = y;
b_hand[2] = image_angle;
//front hand
f_hand[0] = x;
f_hand[1] = y;
f_hand[2] = image_angle;
//back foot
b_foot[0] = x;
b_foot[1] = y;
b_foot[2] = image_angle;
//front foot
f_foot[0] = x;
f_foot[1] = y;
f_foot[2] = image_angle;
//body
body[0] = x;
body[1] = y;
body[2] = image_angle;
//head
head[0] = x;
head[1] = y;
head[2] = image_angle;
//back eye
b_eye[0] = x;
b_eye[1] = y;
b_eye[2] = image_angle;
//front eye
f_eye[0] = x;
f_eye[1] = y;
f_eye[2] = image_angle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(pnum==0)
{   global.leader = self;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RAGE Inactive/ K.O. state

if(!active)
{   if(global.liveBuddies[bnum]==0)
    {   x = global.buddyList[leaderBuddy].x;
        y = global.buddyList[leaderBuddy].y;
        state = 5;
        vspeed = -15;
        vspeed = -10*global.buddyList[leaderBuddy].image_angle;
        ai=true;
    }
}
if(global.liveBuddies[bnum]&gt;0)
{   active=false;
}
else
{   active=true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RAGE Player Controls
if(active){

if(ai)
{   target = getLeader();
    if(check_left(pnum) or check_right(pnum) or check_jump(pnum))
    {   ai=false;
    }
    if(target!=noone)
    {
        if(distance_to_point(target.x,target.y)&gt;860)
        {   x=global.CMRx;
            y=global.CMRy;
        }
    }
}
if(!ai)
{   
    left = check_left(pnum);
    right = check_right(pnum);
    up = check_up(pnum);
    down = check_down(pnum);
    shift=1;
    
    if(check_shift(pnum))
    {   shift=2;
    }
    
    //*******************************************************************
    if(state=0)//Standard Mode
    {   if(left and !right)//left
        {   hspeed = clamp(hspeed-1,-10,10);
            image_xscale = -1;
        }
        else if(right and !left)//right
        {   hspeed = clamp(hspeed+1,-10,10);
            image_xscale = 1;
        }
        else
        {   hspeed = 0;
        }
        
        if(check_jump_pressed(pnum))
        {   if(onGround and global.powerLevel&gt;1)
            {   vspeed = -22;
                onGround = false;
                audio_sound_gain(audio_play_sound(snd_BUDDYJUMP,1,0),global.sfxVolume,0);
            }
            else if(global.powerLevel&gt;3){state=1;}//flightmode
        }
        if(global.powerLevel&gt;2)
        {   if(check_punch_pressed(pnum))
            {   punch=1;}
        }
    }
    
    //*******************************************************************
    else if(state=1)//flightmode
    {   if(check_jump(pnum))
        {   hspeed=image_xscale*15
        }
        else if(check_jump_released(pnum))
        {   state = 0;
        }
    }
    
    //*******************************************************************
    else if(state=2)//Climb Mode
    {   if(global.powerLevel&lt;4)
        {   state=0;
        }
        if(up  and !down)//up press
        {   if(instance_place(x+image_xscale,y-12,land))
            {   vspeed = -5;
            }
            else
            {   hspeed=image_xscale*14;
                vspeed=-12;
                y-=12;
                state = 4;
            }
        }
        else if(down and !up)//down press
        {   if(!instance_place(x,y+4,land))
            {   vspeed = 10;
            }
        }
        else{vspeed=0;}
        
        if(check_jump_pressed(pnum))
        {   onGround=false;
            state=4;
            vspeed=-22;
            effect_create_above(ef_smoke,x,y,0,c_dkgray)
            if(instance_place(x-1,y,land))
            {   x++;
                hspeed=12;
                image_xscale=1;
            }
            else
            {   x--;
                hspeed=-12;
                image_xscale=-1;
            }
        }
        if(check_punch_pressed(pnum))
        {   punch=true;}
    }
    
    //*******************************************************************
    else if(state=3)//Sliding Down Wall
    {   if(!instance_place(x+1*image_xscale,y+8,land))
        {   state=0;
        }
        else{vspeed=1;}
        
        if(check_jump_pressed(pnum))
        {   onGround=false;
            state=4;
            vspeed=-12;
            effect_create_above(ef_smoke,x,y,0,c_dkgray)
            if(instance_place(x-1,y,land))
            {   x++;
                hspeed=12;
                image_xscale=1;
            }
            else
            {   x--;
                hspeed=-12;
                image_xscale=-1;
    }   }   }
    
    //*******************************************************************
    else if(state=4)//Jumped Off Wall
    {   if(left and !right)//left
        {   //hspeed_mod(onGround,-8*shift,shift);
            hspeed = clamp(hspeed-1,-12,12);
            image_xscale = -1;
        }
        else if(right and !left)//right
        {   //hspeed_mod(onGround,8*shift,shift);
            hspeed = clamp(hspeed+1,-12,12);
            image_xscale = 1;
        }
        else if(onGround)
        {   hspeed = 0;
        }
        else
        {   hspeed_mod_0()
        }
        
        if(check_jump_pressed(pnum))
        {   if(onGround)
            {   vspeed = -25;
                onGround = false;
            }
            else{state=1;}//flightmode
        }
        if(check_punch_pressed(pnum))
        {   punch=true;}
    }
    //*******************************************************************
    else if(state=5)//hurt
    {   hspeed_mod_0()
    }
    //*******************************************************************
    else if(state=6)//Level Complete
    {
    }

}//if !ai

else
{   if(target!=noone)
    {   aiFollow(target.x,target.y,target.image_xscale)
    }
}


}//if active
else
{   state=5;}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step3_CollisionPhysics

/***************************************************
  Object - Woodruff
  Event - Step(Script 3)
  
  Script for Collision and Physics
  
  Last Modified: 21 December 2015  
 ***************************************************/

/*** GRAVITY ***************************************/
switch (state)
{   case 0: vspeed+=1; break; //Standard Mode
    case 1: vspeed=clamp(vspeed+2,-20,2);  break; //Flight Mode
    case 2: hspeed=0;  break; //Climb Mode
    case 3: /**/;  break; //Climb Slide Mode
    case 4: vspeed+=1; break; //Jumped from Climb Mode
    case 5: vspeed+=1; break; //Hurt Mode
    case 6: vspeed+=1; break; //Level Complete Mode
}

/*** LIGHTS ****************************************/

if(pnum==0)
{
    if(place_meeting(x,y,lightsOff))
    {   global.light=false;}
    else
    {   global.light=true;}
}

/*** LAND COLLISION ********************************/

slope=0;
landCollision(land);
landCollision(Box);
bx=instance_place(x,y,Box);
if(bx)
{   hspeed=clamp(x-bx.x,-10,10)
}

hspeed=clamp(hspeed,-24,24);
vspeed=clamp(vspeed,-24,24);

/*** END LAND COLLISION ****************************/
 
 
 
/*** WALL GRAB ************************************/

if(state = 1 /*state is flight*/){
    if(place_meeting(x+hspeed+1*image_xscale,y,land)){
        if(check_jump(pnum) and global.powerLevel&gt;4){
           state = 2; /*set state to climb*/
}   }   }
 
/*** COIN COLLISION ********************************/

inst = instance_place(x,y,coin);
if(inst!=noone)
{   coinNum++;
    cCount=16;
    score+=1;//*coinNum;
    audio_stop_sound(snd_coin);
    //audio_sound_pitch(audio_play_sound(snd_coin,1,0),0.8+(coinNum/20));
    sfx(snd_coin);
    global.score_alpha = 200;
    with(inst)
    {   effect_create_below(ef_flare,x,y,1,c_yellow);
        effect_create_below(ef_firework,x,y,0,c_white);
        instance_destroy();
    }
}
else if(cCount=0)
{   cCount=16;
    coinNum=0;
}
else
{   cCount--;
}

/***************************************************
  END COIN COLLISION
 ***************************************************/
  
 
/***************************************************
  POWER UP COLLISION
 ***************************************************/
inst = instance_place(x,y,power_up);
if(inst!=noone)
{   if(global.powerLevel&lt;5)
    {   global.powerLevel++;
        switch(global.powerLevel)
        {   case 1: spawn_message("NEW ABILITY!","PRESS &lt;&gt; TO MOVE!",180,0)
                    break;
            case 2: spawn_message("NEW ABILITY!","PRESS [ TO JUMP!",180,0)
                    break;
            case 3: spawn_message2("NEW ABILITY!","PRESS { TO PUNCH!","GET THOSE FRACKERS!",180,0)
                    break;
            case 4: spawn_message2("NEW ABILITY!","PRESS [[ TO GLIDE!","FRACKERS WILL NOT GET AWAY!",180,0)
                    break;
            case 5: spawn_message2("NEW ABILITY!","GLIDE INTO WALLS TO CLIMB THEM!","NO PLACE TO HIDE FRACKERS!",180,0)
                    break;
        }
    }
    audio_play_sound(snd_power_up,1,0);
    with(inst)
    {   effect_create_below(ef_flare,x,y,2,c_orange);
        effect_create_below(ef_flare,x,y,2,c_yellow);
        effect_create_below(ef_firework,x,y,1,c_white);
        instance_destroy();
    }
}

/*** SECRET COLLISION ******************************/

inst = instance_place(x,y,secret);
if(inst!=noone)
{   if(global.powerLevel&lt;5)
    {   global.powerLevel++;}
    audio_play_sound(snd_GetSecret,1,0);
    with(inst)
    {   effect_create_below(ef_flare,x,y,2,c_orange);
        effect_create_below(ef_flare,x,y,2,c_yellow);
        effect_create_below(ef_firework,x,y,1,c_blue);
        instance_destroy();
    }
}

/*** DOOR ENTRY COLLISION **************************/

if(check_interact_pressed(pnum))
{   if(position_meeting(x,y,door))
    {   dr = instance_position(x,y,door);
        if(dr.open)
        {   if(dr.current_level=0)
            {   room_goto(dr.next_level);
                score=0;
            }else
            {   level_end(dr.current_level,dr.next_level);   
}   }   }   }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RAGE Enemy Collision Code

/***************************************************
  ENEMY COLLISION
 ***************************************************/

//Collide BADGUY
if(!ai)
{

if(vspeed&gt;=0)//bounce off of him
{   inst = instance_place(x,y+vspeed,badguy);
    if(inst)
    {   //hspeed = clamp(round(x-inst.x),-20,20);
        //vspeed = -15;
        //inst.hp--;
    }
}

//get hurt
inst = instance_place(x,y,badguy);
if(inst)
{   if(!place_meeting(x,y,Box))
    {   if(!hurt)
        {   hurt=600;
            state=5;
            hspeed = clamp(round(x-inst.x),-20,20);
            vspeed = -15;
            global.liveBuddies[bnum] = hurt;
            
            seekingPlacement = true;
            //find next liveBuddy to inhabit
            for(i=0;i&lt;global.numBuddies;i++)
            {   if(bnum!=i)//different buddy
                {   if(seekingPlacement)//still looking for swap
                    {   if(liveBuddies[i]=0)//buddy is living
                        {   if(global.buddyList[i].ai)//buddy is not player controlled
                            {   if(global.leaderBuddy==bnum)
                                {   global.leaderBuddy=i;
                                }
                                swapBuddies(bnum,i);//swap with buddy
                                seekingPlacement=false;
                                
                            }
                            else//player of high rank than ai, ie P2, becomes leader
                            {   global.leaderBuddy = i;
}   }   }   }   }   }   }   }


inst = instance_place(x,y,FireBlock);
if(inst)
{   if(!hurt)
    {   hurt=600;
        state=5;
        hspeed = clamp(round(x-inst.x),-20,20);
        vspeed = -15;
        global.liveBuddies[bnum] = hurt;
        
        seekingPlacement = true;
        //find next liveBuddy to inhabit
        for(i=0;i&lt;global.numBuddies;i++)
        {   if(bnum!=i)//different buddy
            {   if(seekingPlacement)//still looking for swap
                {   if(liveBuddies[i]=0)//buddy is living
                    {   if(global.buddyList[i].ai)//buddy is not player controlled
                        {   if(global.leaderBuddy==bnum)
                            {   global.leaderBuddy=i;
                            }
                            swapBuddies(bnum,i);//swap with buddy
                            seekingPlacement=false;
                            
                        }
                        else//player of high rank than ai, ie P2, becomes leader
                        {   global.leaderBuddy = i;
}   }   }   }   }   }   }

}//if not ai
/***************************************************
  END ENEMY COLLISION
 ***************************************************/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RAGE Draw Calculation Code
pc = make_color_hsv((330-35*global.powerLevel)mod(255),120,255)
pc = global.cVar;
if(state=0)
{
    if(vspeed=0 and hspeed=0)
    {
    //back hand
    b_hand[0] = ease_pos(b_hand[0],hspeed+x-5*image_xscale,8);
    b_hand[1] = ease_pos(b_hand[1],vspeed+y,8);
    b_hand[2] = image_angle;
    //front hand
    f_hand[0] = ease_pos(f_hand[0],hspeed+x+5*image_xscale,8);
    f_hand[1] = ease_pos(f_hand[1],vspeed+y,8);
    f_hand[2] = image_angle;
    //back foot
    b_foot[0] = hspeed+x-image_xscale*10;
    b_foot[1] = vspeed+y+30;
    b_foot[2] = image_angle;
    //front foot
    f_foot[0] = hspeed+x+image_xscale*10;
    f_foot[1] = vspeed+y+30;
    f_foot[2] = image_angle;
    //body
    body[0] = hspeed+x;
    body[1] = vspeed+y+10;
    body[2] = image_angle/2;
    //head
    head[0] = hspeed+x;
    head[1] = vspeed+y-35;
    head[2] = image_angle;
    //back eye
    b_eye[0] = hspeed+x+15*image_xscale;
    b_eye[1] = vspeed+y-33;
    b_eye[2] = image_angle;
    //front eye
    f_eye[0] = hspeed+x;
    f_eye[1] = vspeed+y-30;
    f_eye[2] = image_angle;
    }
    else
    {
    //back hand
    b_hand[0] = anim_hand_x(-1);
    b_hand[1] = anim_hand_y(-1);
    b_hand[2] = image_angle;
    //front hand
    f_hand[0] = anim_hand_x(1);
    f_hand[1] = anim_hand_y(1);
    f_hand[2] = image_angle;
    //back foot
    b_foot[0] = anim_foot_x(-1)-image_xscale*15;
    b_foot[1] = anim_foot_y(-1)+25;
    b_foot[2] = image_angle;
    //front foot
    f_foot[0] = anim_foot_x(1)+image_xscale*15;
    f_foot[1] = anim_foot_y(1)+25;
    f_foot[2] = image_angle;
    //body
    body[0] = hspeed+x;
    body[1] = vspeed+y+10;
    body[2] = image_angle/2;
    //head
    head[0] = hspeed+x;
    head[1] = vspeed+y-35;
    head[2] = image_angle;
    //back eye
    b_eye[0] = hspeed+x+15*image_xscale;
    b_eye[1] = vspeed+y-33;
    b_eye[2] = image_angle;
    //front eye
    f_eye[0] = hspeed+x;
    f_eye[1] = vspeed+y-30;
    f_eye[2] = image_angle;
    }
}
else if(state=1)
{
    //back hand
    b_hand[0] = hspeed+x+image_xscale*45;
    b_hand[1] = vspeed+anim_hand_y(-1);
    b_hand[2] = image_angle;
    //front hand
    f_hand[0] = hspeed+x+image_xscale*45;
    f_hand[1] = vspeed+anim_hand_y(1);
    f_hand[2] = image_angle;
    //back foot
    b_foot[0] = hspeed+x-image_xscale*15;
    b_foot[1] = vspeed+anim_foot_y(-1)+25;
    b_foot[2] = image_angle;
    //front foot
    f_foot[0] = hspeed+x-image_xscale*15;
    f_foot[1] = vspeed+anim_foot_y(1)+25;
    f_foot[2] = image_angle;
    //body
    body[0] = hspeed+x;
    body[1] = vspeed+y+10;
    body[2] = -image_xscale*60;
    //head
    head[0] = hspeed+x+image_xscale*25;
    head[1] = vspeed+y-20;
    head[2] = -image_xscale*30;
    //back eye
    b_eye[0] = hspeed+x+40*image_xscale;
    b_eye[1] = vspeed+y-18;
    b_eye[2] = -image_xscale*30;
    //front eye
    f_eye[0] = hspeed+x+25*image_xscale;
    f_eye[1] = vspeed+y-15;
    f_eye[2] = -image_xscale*30;
}
else if(state = 2)
{
    //back hand
    b_hand[0] = hspeed+x+image_xscale*20;
    b_hand[1] = anim_hand_y(-1);
    b_hand[2] = image_angle;
    //front hand
    f_hand[0] = hspeed+x+image_xscale*20;
    f_hand[1] = anim_hand_y(1);
    f_hand[2] = image_angle;
    //back foot
    b_foot[0] = hspeed+x+image_xscale*20;
    b_foot[1] = anim_foot_y(-1)+25;
    b_foot[2] = image_angle;
    //front foot
    f_foot[0] = hspeed+x+image_xscale*20;
    f_foot[1] = anim_foot_y(1)+25;
    f_foot[2] = image_angle;
    //body
    body[0] = hspeed+x;
    body[1] = vspeed+y+10;
    body[2] = image_angle/2;
    //head
    head[0] = hspeed+x;
    head[1] = vspeed+y-35;
    head[2] = 20;
    //back eye
    b_eye[0] = hspeed+x+15*image_xscale;
    b_eye[1] = vspeed+y-33;
    b_eye[2] = 20;
    //front eye
    f_eye[0] = hspeed+x;
    f_eye[1] = vspeed+y-30;
    f_eye[2] = 20;
}
else if(state = 3)
{
    //back hand
    b_hand[0] = hspeed+x+image_xscale*20;
    b_hand[1] = anim_hand_y(-1);
    b_hand[2] = image_angle;
    //front hand
    f_hand[0] = hspeed+x+image_xscale*20;
    f_hand[1] = anim_hand_y(1);
    f_hand[2] = image_angle;
    //back foot
    b_foot[0] = hspeed+x+image_xscale*20;
    b_foot[1] = anim_foot_y(-1)+25;
    b_foot[2] = image_angle;
    //front foot
    f_foot[0] = hspeed+x+image_xscale*20;
    f_foot[1] = anim_foot_y(1)+25;
    f_foot[2] = image_angle;
    //body
    body[0] = hspeed+x;
    body[1] = vspeed+y+10;
    body[2] = image_angle/2;
    //head
    head[0] = hspeed+x;
    head[1] = vspeed+y-35;
    head[2] = 20;
    //back eye
    b_eye[0] = hspeed+x+15*image_xscale;
    b_eye[1] = vspeed+y-33;
    b_eye[2] = 20;
    //front eye
    f_eye[0] = hspeed+x;
    f_eye[1] = vspeed+y-30;
    f_eye[2] = 20;
}
else if(state = 4)
{
    //back hand
    b_hand[0] = hspeed+x+image_xscale*20;
    b_hand[1] = anim_hand_y(-1);
    b_hand[2] = image_angle;
    //front hand
    f_hand[0] = hspeed+x+image_xscale*20;
    f_hand[1] = anim_hand_y(1);
    f_hand[2] = image_angle;
    //back foot
    b_foot[0] = hspeed+x+image_xscale*20;
    b_foot[1] = anim_foot_y(-1)+25;
    b_foot[2] = image_angle;
    //front foot
    f_foot[0] = hspeed+x+image_xscale*20;
    f_foot[1] = anim_foot_y(1)+25;
    f_foot[2] = image_angle;
    //body
    body[0] = hspeed+x;
    body[1] = vspeed+y+10;
    body[2] = image_angle/2;
    //head
    head[0] = hspeed+x;
    head[1] = vspeed+y-35;
    head[2] = 20;
    //back eye
    b_eye[0] = hspeed+x+15*image_xscale;
    b_eye[1] = vspeed+y-33;
    b_eye[2] = 20;
    //front eye
    f_eye[0] = hspeed+x;
    f_eye[1] = vspeed+y-30;
    f_eye[2] = 20;
}
else if(state=5)
{
    //back hand
    b_hand[0] = hspeed+x+image_xscale*25;
    b_hand[1] = vspeed+anim_hand_y(-1)-20;
    b_hand[2] = image_angle;
    //front hand
    f_hand[0] = hspeed+x-image_xscale*45;
    f_hand[1] = vspeed+anim_hand_y(1)-20;
    f_hand[2] = image_angle;
    //back foot
    b_foot[0] = hspeed+x+image_xscale*20;
    b_foot[1] = vspeed+anim_foot_y(-1)+30;
    b_foot[2] = image_angle;
    //front foot
    f_foot[0] = hspeed+x-image_xscale*20;
    f_foot[1] = vspeed+anim_foot_y(1)+35;
    f_foot[2] = image_angle;
    //body
    body[0] = hspeed+x;
    body[1] = vspeed+y+10;
    body[2] = -image_xscale*-40;
    //head
    head[0] = hspeed+x-image_xscale*15;
    head[1] = vspeed+y-20;
    head[2] = -image_xscale*-30;
    //back eye
    b_eye[0] = hspeed+x-image_xscale*5;
    b_eye[1] = vspeed+y-18;
    b_eye[2] = -image_xscale*-30;
    //front eye
    f_eye[0] = hspeed+x-image_xscale*25;
    f_eye[1] = vspeed+y-15;
    f_eye[2] = -image_xscale*-30;
    if(distance_to_point(global.CMRx,global.CMRy)&lt;1000)
    {   if(choose(0,0,0,1))
        {   effect_create_above(ef_smokeup,x,y,2,c_orange)}
    }
}
else //if(state=6)
{
    //back hand
    b_hand[0] = hspeed+x+image_xscale*45;
    b_hand[1] = vspeed+anim_hand_y(-1);
    b_hand[2] = image_angle;
    //front hand
    f_hand[0] = hspeed+x+image_xscale*45;
    f_hand[1] = vspeed+anim_hand_y(1);
    f_hand[2] = image_angle;
    //back foot
    b_foot[0] = hspeed+x-image_xscale*15;
    b_foot[1] = vspeed+anim_foot_y(-1)+25;
    b_foot[2] = image_angle;
    //front foot
    f_foot[0] = hspeed+x-image_xscale*15;
    f_foot[1] = vspeed+anim_foot_y(1)+25;
    f_foot[2] = image_angle;
    //body
    body[0] = hspeed+x;
    body[1] = vspeed+y+10;
    body[2] = -image_xscale*60;
    //head
    head[0] = hspeed+x+image_xscale*25;
    head[1] = vspeed+y-20;
    head[2] = -image_xscale*30;
    //back eye
    b_eye[0] = hspeed+x+40*image_xscale;
    b_eye[1] = vspeed+y-18;
    b_eye[2] = -image_xscale*30;
    //front eye
    f_eye[0] = hspeed+x+25*image_xscale;
    f_eye[1] = vspeed+y-15;
    f_eye[2] = -image_xscale*30;
}

if(!active)
{
    hspeed_mod_0();
    if(onGround)
    {   vspeed = -10; onGround = false;}
    //back hand
    b_hand[0] = hspeed+anim_hand_x(-1)//+image_xscale*25;
    b_hand[1] = vspeed+anim_hand_y(-1)-20;
    b_hand[2] = image_angle;
    //front hand
    f_hand[0] = hspeed+anim_hand_x(1)//-image_xscale*45;
    f_hand[1] = vspeed+anim_hand_y(1)-20;
    f_hand[2] = image_angle;
    //back foot
    b_foot[0] = hspeed+anim_hand_x(-1)+image_xscale*20;
    b_foot[1] = vspeed+anim_hand_y(-1)+15;
    b_foot[2] = image_angle;
    //front foot
    f_foot[0] = hspeed+anim_hand_x(-1)-image_xscale*20;
    f_foot[1] = vspeed+anim_hand_y(1)+25;
    f_foot[2] = image_angle;
    //body
    body[0] = hspeed+x;
    body[1] = vspeed+y+10;
    body[2] = -image_xscale*-40;
    //head
    head[0] = hspeed+x-image_xscale*15;
    head[1] = vspeed+y-20;
    head[2] = -image_xscale*-30;
    //back eye
    b_eye[0] = hspeed+x-image_xscale*10;
    b_eye[1] = vspeed+y-24;
    b_eye[2] = -image_xscale*-65;
    //front eye
    f_eye[0] = hspeed+x-image_xscale*25;
    f_eye[1] = vspeed+y-18;
    f_eye[2] = -image_xscale*-65;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RAGE Punch Code

if(global.powerLevel&gt;0)
{   power_level_damage=DMGMAP[global.powerLevel-1];}

par=20;//interval
if(punch=1)
{   if(!fpunch)//not front punching
    {   fpunch=par/2;
        audio_sound_gain(audio_play_sound(snd_BUDDYPUNCH,1,0),global.sfxVolume,0);
        ffist=instance_create(x,y,fist);
        ffist.color = pc;
        ffist.hspeed=30*image_xscale;
        ffist.image_xscale=image_xscale;
    }
    else if(fpunch&lt;par)
    {   if(bpunch&lt;1)//not back punching
        {   bpunch=par/2;
            audio_sound_gain(audio_play_sound(snd_BUDDYPUNCH,1,0),global.sfxVolume,0);
            bfist=instance_create(x,y,fist);
            bfist.color = pc;
            bfist.hspeed=30*image_xscale;
            bfist.sine=false;
            bfist.image_xscale=image_xscale;
        }
    }
}
else
{
}
punch=0;
if(fpunch&gt;0)
{   f_hand[0]=ffist.x;
    f_hand[1]=ffist.y;
    fpunch--;
    if(fpunch=0)
    {   with(ffist){instance_destroy();}
    }
}
if(bpunch&gt;0)
{   b_hand[0]=bfist.x;
    b_hand[1]=bfist.y;
    bpunch--;
    if(bpunch=0)
    {   with(bfist){instance_destroy();}
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage Taken Code

if(hurt&gt;0)
{   state=5;
    hurt--;
    pc = make_color_hsv(0,hurt*10 mod 255,255);
}
else
{   hurt=0;  //hurt=false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RAGE Death Code

if(active)
{
    if(y&gt;room_height)
    {   instance_create(x,y,YOUR_DEAD);
        active=false;
    }
    if(global.powerLevel&lt;1)
    {   instance_create(x,y,YOUR_DEAD);
        active=false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RAGE Particle Code
pScale = 0.2;
part_type_scale(pt, pScale, pScale);
part_type_colour1(pt, getPlayerColorFullSat(bnum,200));

if(!ai)
{   light_radius(800,make_color_hsv(20,150,255));
    pScale = 0.36;
    part_type_scale(pt, pScale, pScale);
    part_type_colour2(pt,c_white,getPlayerColorFullSat(bnum,200));
    //part_particles_create(global.ps, b_hand[0], b_hand[1], global.pt, 1);
    //part_particles_create(global.psf, f_hand[0], f_hand[1], global.pt, 1);
}

/*
switch(global.powerLevel)
{   
    case 6: light_radius(800,make_color_hsv(20,150,255));
            pScale = 0.36;
            part_type_scale(pt, pScale, pScale);
            part_type_colour3(pt,c_white,make_colour_hsv(20,255,255),make_colour_hsv(20,255,255));
            part_particles_create(global.ps, b_hand[0], b_hand[1], global.pt, 1);
            part_particles_create(global.psf, f_hand[0], f_hand[1], global.pt, 1);
            break;
            
    case 5: light_radius(700,make_color_hsv(20,150,220));
            pScale = 0.32;
            part_type_scale(pt, pScale, pScale);
            part_type_colour3(pt,c_white,make_colour_hsv(20,255,255),make_colour_hsv(20,255,255));
            part_particles_create(global.ps, b_hand[0], b_hand[1], global.pt, 1);
            part_particles_create(global.psf, f_hand[0], f_hand[1], global.pt, 1);
            break;
            
    case 4: light_radius(600,make_color_hsv(20,150,200));
            pScale = 0.28;
            part_type_scale(pt, pScale, pScale);
            part_type_colour3(pt,c_white,make_colour_hsv(20,255,255),make_colour_hsv(20,255,255));
            part_particles_create(global.ps, b_hand[0], b_hand[1], global.pt, 1);
            part_particles_create(global.psf, f_hand[0], f_hand[1], global.pt, 1);
            break;
            
    case 3: light_radius(500,make_color_hsv(20,150,180));
            pScale = 0.28;
            part_type_scale(pt, pScale, pScale);
            part_type_colour3(pt,c_white,make_colour_hsv(20,255,255),make_colour_hsv(20,255,255));
            part_particles_create(global.ps, b_hand[0], b_hand[1], global.pt, 1);
            part_particles_create(global.psf, f_hand[0], f_hand[1], global.pt, 1);
            break;
            
    case 2: light_radius(400,make_color_hsv(20,150,160));
            pScale = 0.24;
            part_type_scale(pt, pScale, pScale);
            part_type_colour3(pt,c_white,make_colour_hsv(20,255,255),make_colour_hsv(20,255,255));
            part_particles_create(global.ps, b_hand[0], b_hand[1], global.pt, 1);
            part_particles_create(global.psf, f_hand[0], f_hand[1], global.pt, 1);
            break;
            
    case 1: light_radius(300,make_color_hsv(20,150,150));
            pScale = 0.24;
            part_type_scale(pt, pScale, pScale);
            part_type_colour3(pt,c_white,make_colour_hsv(20,255,255),make_colour_hsv(20,255,255));
            part_particles_create(global.ps, b_hand[0], b_hand[1], global.pt, 1);
            part_particles_create(global.psf, f_hand[0], f_hand[1], global.pt, 1);
            break;
}
*/



/*
part_particles_create(global.ps, b_hand[0], b_hand[1], global.pt, 1);
part_particles_create(global.psf, f_hand[0], f_hand[1], global.pt, 1);





/*
part_particles_create(global.psl,(x-view_xview)/2,(y-view_yview)/2,global.ptl,1);

surface_set_target(global.lightmap);
part_system_drawit(psl);
surface_reset_target();
*/

/*
spd = sqrt(sqr(hspeed)+sqr(vspeed))/2;
dir = 180+direction;
part_type_direction(ptl,dir,dir,0,20);
part_type_speed(ptl,spd,spd,0,0);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Grouping "noone" Reassignment

global.buddyList[pnum] = noone;
global.liveBuddies[bnum] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RAGE Draw Player
draw_sprite_ext(sprite_index,state,x,y,image_xscale,image_yscale,image_angle,pc,0);
pc=getPlayerColor(bnum,200)

//******    COLORED LAYER    *********************
//back hand
draw_sprite_ext(GrayBuddy,2,b_hand[0],b_hand[1],image_xscale,1,b_hand[2],pc,image_alpha);
//back foot
draw_sprite_ext(GrayBuddy,2,b_foot[0],b_foot[1],image_xscale,1,b_foot[2],pc,image_alpha);
//body
draw_sprite_ext(GrayBuddy,0,body[0],body[1],image_xscale,1,body[2],pc,image_alpha);
//body white
draw_sprite_ext(GrayBuddy,4,body[0],body[1],image_xscale,1,body[2],merge_color(c_white,pc,0.5),image_alpha);
//head
draw_sprite_ext(GrayBuddy,1,head[0],head[1],image_xscale,1,head[2],pc,image_alpha);
//back eye
draw_sprite_ext(GrayBuddy,3,b_eye[0],b_eye[1],image_xscale,1,b_eye[2],merge_color(c_white,pc,0.5),image_alpha);
//front eye
draw_sprite_ext(GrayBuddy,3,f_eye[0],f_eye[1],image_xscale,1,f_eye[2],merge_color(c_white,pc,0.5),image_alpha);
//front hand
draw_sprite_ext(GrayBuddy,2,f_hand[0],f_hand[1],image_xscale,1,f_hand[2],pc,image_alpha);
//front foot
draw_sprite_ext(GrayBuddy,2,f_foot[0],f_foot[1],image_xscale,1,f_foot[2],pc,image_alpha);


/*

image_alpha = 0.2;
scl = random_range(1.05,1.25);

draw_set_blend_mode_ext(bm_src_alpha,bm_one);
//******    GLOW LAYER    *********************
//back hand
draw_sprite_ext(GrayBuddy,2,b_hand[0],b_hand[1],image_xscale*scl,scl,b_hand[2],pc,image_alpha);
//back foot
draw_sprite_ext(GrayBuddy,2,b_foot[0],b_foot[1],image_xscale*scl,scl,b_foot[2],pc,image_alpha);
//body
draw_sprite_ext(GrayBuddy,0,body[0],body[1],image_xscale*scl,scl,body[2],pc,image_alpha);
//head
draw_sprite_ext(GrayBuddy,1,head[0],head[1],image_xscale*scl,scl,head[2],pc,image_alpha);
//back eye
draw_sprite_ext(GrayBuddy,3,b_eye[0],b_eye[1],image_xscale*scl,scl,b_eye[2],merge_color(c_white,pc,0.5),image_alpha);
//front eye
draw_sprite_ext(GrayBuddy,3,f_eye[0],f_eye[1],image_xscale*scl,scl,f_eye[2],merge_color(c_white,pc,0.5),image_alpha);
//front hand
draw_sprite_ext(GrayBuddy,2,f_hand[0],f_hand[1],image_xscale*scl,scl,f_hand[2],pc,image_alpha);
//front foot
draw_sprite_ext(GrayBuddy,2,f_foot[0],f_foot[1],image_xscale*scl,scl,f_foot[2],pc,image_alpha);

draw_set_blend_mode(bm_normal);

*/

image_alpha = 1;

/*

//******    BRIGHTNESS LAYER    *********************
surface_set_target(global.lightmap);
draw_set_blend_mode_ext(bm_src_alpha,bm_dest_alpha);
xx = view_xview[0];
yy = view_yview[0];
//back hand
draw_sprite_ext(GrayBuddy,2,(b_hand[0]-xx)/2,(b_hand[1]-yy)/2,image_xscale/2,1/2,b_hand[2],c_white,0.5);
//back foot
draw_sprite_ext(GrayBuddy,2,(b_foot[0]-xx)/2,(b_foot[1]-yy)/2,image_xscale/2,1/2,b_foot[2],c_white,0.5);
//body
draw_sprite_ext(GrayBuddy,0,(body[0]-xx)/2,(body[1]-yy)/2,image_xscale/2,1/2,body[2],c_white,0.5);
//head
draw_sprite_ext(GrayBuddy,1,(head[0]-xx)/2,(head[1]-yy)/2,image_xscale/2,1/2,head[2],c_white,0.5);
//back eye
draw_sprite_ext(GrayBuddy,3,(b_eye[0]-xx)/2,(b_eye[1]-yy)/2,image_xscale/2,1/2,b_eye[2],c_white,0.5);
//front eye
draw_sprite_ext(GrayBuddy,3,(f_eye[0]-xx)/2,(f_eye[1]-yy)/2,image_xscale/2,1/2,f_eye[2],c_white,0.5);
//front hand
draw_sprite_ext(GrayBuddy,2,(f_hand[0]-xx)/2,(f_hand[1]-yy)/2,image_xscale/2,1/2,f_hand[2],c_white,0.5);
//front foot
draw_sprite_ext(GrayBuddy,2,(f_foot[0]-xx)/2,(f_foot[1]-yy)/2,image_xscale/2,1/2,f_foot[2],c_white,0.5);
draw_set_blend_mode(bm_normal);
surface_reset_target();

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
